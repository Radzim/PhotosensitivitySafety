next step:
	rectangles, math!
	separate up and down flashes
	flashing rectangles, or flashing pixels?
	




	import cv2
import numpy as np
import pafy
import plot

luminanceArray = []
luminancePlot = plot.Plotter(500, 300)
luminanceLimitPlot = plot.Plotter(500, 300)
redLimitPlot = plot.Plotter(500, 300)

url = "https://www.youtube.com/watch?v=GuLcxg5VGuo" # barney video cv
# url = "https://www.youtube.com/watch?v=PlcTn5egByQ"  # flashing images
# url = "https://www.youtube.com/watch?v=XqZsoesa55w"  # baby shark
# url = "https://www.youtube.com/watch?v=0EqSXDwTq6U"  # charlie bit my finger

video = pafy.new(url)
best = video.getbest(preftype="mp4")

capture = cv2.VideoCapture(best.url)

previousRelativeLuminance = 0
previousRedMajority = 0
previousRedSaturation = 0

while True:
    check, X8bit = capture.read()
    if X8bit is None:
        break
    # R8bit = X8bit[:, :, 2]
    # G8bit = X8bit[:, :, 1]
    # B8bit = X8bit[:, :, 0]

    XsRGB = np.divide(np.ndarray.copy(X8bit).astype(float), 255)
    # RsRGB = np.divide(np.ndarray.copy(R8bit).astype(float), 255)
    # GsRGB = np.divide(np.ndarray.copy(G8bit).astype(float), 255)
    # BsRGB = np.divide(np.ndarray.copy(B8bit).astype(float), 255)

    X = np.maximum(np.divide(XsRGB, 12.92), np.power(np.divide(XsRGB+0.055, 1.055), 2.4))
    # R = np.maximum(np.divide(RsRGB, 12.92), np.power(np.divide(RsRGB+0.055, 1.055), 2.4))
    # G = np.maximum(np.divide(GsRGB, 12.92), np.power(np.divide(GsRGB+0.055, 1.055), 2.4))
    # B = np.maximum(np.divide(BsRGB, 12.92), np.power(np.divide(BsRGB+0.055, 1.055), 2.4))

    relativeLuminance = np.multiply(X, [0.0722, 0.7152, 0.2126])

    redSaturation = np.divide(X[:, :, 2], X)
    redMajority = np.minimum(np.multiply(np.multiply(X, [1, -1, -1]), 320), 0)

    deltaRelativeLuminance = np.maximum(relativeLuminance-previousRelativeLuminance, previousRelativeLuminance-relativeLuminance)
    limitRelativeLuminance = np.array(np.multiply(np.where(deltaRelativeLuminance >= 0.1, 1, 0), np.where(np.minimum(relativeLuminance, previousRelativeLuminance) <= 0.8, 1, 0)), dtype=np.uint8)

    deltaRedMajority = np.array(np.maximum(redMajority-previousRedMajority, previousRedMajority-redMajority))
    limitRedMajority = np.array(np.multiply(np.where(deltaRedMajority >= 20, 1, 0), np.where(np.maximum(redSaturation, previousRedSaturation) >= 0.8, 1, 0)), dtype=np.uint8)

    if check:

        cv2.imshow('Original', X8bit)

        relativeLuminance8bit = np.array(np.multiply(relativeLuminance, 255), dtype=np.uint8)
        cv2.imshow('Relative Luminance', relativeLuminance8bit)

        deltaRelativeLuminance8bit = np.array(np.multiply(deltaRelativeLuminance, 255), dtype=np.uint8)
        cv2.imshow('Relative Luminance Delta', deltaRelativeLuminance8bit)

        limitRelativeLuminance8bit = np.array(np.multiply(limitRelativeLuminance, 255), dtype=np.uint8)
        cv2.imshow('Relative Luminance Delta Breach', limitRelativeLuminance8bit)

        limitRedMajority8bit = X8bit
        limitRedMajority8bit[:, :, 0] = 0
        limitRedMajority8bit[:, :, 1] = 0
        limitRedMajority8bit[:, :, 2] = np.array(np.multiply(limitRedMajority, 255), dtype=np.uint8)
        cv2.imshow('Red Majority Delta Breach', limitRedMajority8bit)

        # print(np.average(limitRedMajority)+np.average(limitRelativeLuminance) >= 1/9*0.25)
        luminancePlot.plot(np.average(relativeLuminance8bit), label="Luminance", line=1)
        luminanceLimitPlot.plot(np.average(limitRelativeLuminance8bit), label="General Flash", line=0)
        redLimitPlot.plot(np.average(limitRedMajority8bit)*10, label="Red Flash", line=0)
        cv2.waitKey(10)

        previousRelativeLuminance = relativeLuminance
        previousRedMajority = redMajority
        previousRedSaturation = redSaturation

        continue
    break

capture.release()

cv2.destroyAllWindows()
